"use client";

import React, { useState, useEffect, useRef } from 'react';
import { Button } from './Button';
import { Modal } from './Modal';
import type { View } from '../types/types';

interface ForgotPasswordModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSendResetEmail: (email: string) => Promise<string | void>; 
}

export const ForgotPasswordModal: React.FC<ForgotPasswordModalProps> = ({
  isOpen,
  onClose,
  onSendResetEmail,
}) => {
  const [email, setEmail] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const emailInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (isOpen) {
      setEmail('');
      setError(null);
      setSuccessMessage(null);
      setIsLoading(false);
      setTimeout(() => emailInputRef.current?.focus(), 100);
    }
  }, [isOpen]);

  const isValidEmail = (emailToTest: string): boolean => {
    return /\S+@\S+\.\S+/.test(emailToTest);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setSuccessMessage(null);

    if (!email.trim()) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì');
      return;
    }
    if (!isValidEmail(email)) {
      setError('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }

    setIsLoading(true);
    try {
      await onSendResetEmail(email);
      setSuccessMessage('‡∏´‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô‡πÑ‡∏°‡πà‡∏ä‡πâ‡∏≤');
      setEmail('');
    } catch (err: any) {
      setError(err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title="üîë ‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô?">
      <form onSubmit={handleSubmit} className="space-y-4">
        <p className="text-sm font-serif text-neutral-dark">
          ‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
        </p>
        <div>
          <label htmlFor="resetEmail" className="block text-sm font-sans font-medium text-neutral-dark mb-1">
            ‡∏≠‡∏µ‡πÄ‡∏°‡∏•:
          </label>
          <input
            ref={emailInputRef}
            type="email"
            id="resetEmail"
            name="email"
            value={email}
            onChange={(e) => {
              setEmail(e.target.value);
              if (error) setError(null);
              if (successMessage) setSuccessMessage(null);
            }}
            className={`w-full ${error ? 'input-error' : ''}`}
            placeholder="your.email@example.com"
            disabled={isLoading}
          />
          {error && <p className="text-red-500 font-sans text-xs mt-1">{error}</p>}
        </div>

        {successMessage && (
          <div className="p-3 bg-green-50 border border-green-300 rounded-md text-sm text-green-700 font-sans">
            {successMessage}
          </div>
        )}

        <div className="flex flex-col sm:flex-row gap-3 pt-2">
          <Button
            type="submit"
            variant="primary" 
            size="md"
            className="w-full sm:flex-grow"
            disabled={isLoading}
          >
            {isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...' : 'üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï'}
          </Button>
          <Button
            type="button"
            onClick={onClose}
            variant="outline"
            colorScheme="neutral" 
            size="md"
            className="w-full sm:w-auto"
            disabled={isLoading}
          >
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </Button>
        </div>
      </form>
    </Modal>
  );
};
