
import React, { useState, useEffect } from 'react';
import type { HelperProfile } from '../types';
import { Button } from './Button';
import { containsBlacklistedWords } from '../App'; // Import blacklist checker

type FormDataType = Omit<HelperProfile, 'id' | 'postedAt' | 'userId' | 'username' | 'isSuspicious' | 'isPinned' | 'isUnavailable' | 'contact' | 'gender' | 'birthdate' | 'educationLevel' | 'adminVerifiedExperience' | 'interestedCount' | 'ownerId' | 'createdAt' | 'updatedAt'>;


interface OfferHelpFormProps {
  onSubmitProfile: (profileData: FormDataType & { id?: string }) => void; 
  onCancel: () => void;
  initialData?: HelperProfile; 
  isEditing?: boolean;
}

const initialFormStateForCreate: FormDataType = {
  profileTitle: '',
  details: '',
  area: '',
  availability: '', 
  availabilityDateFrom: '',
  availabilityDateTo: '',
  availabilityTimeDetails: '', 
};

type FormErrorsType = Partial<Record<Exclude<keyof HelperProfile, 'id' | 'postedAt' | 'userId' | 'username' | 'isSuspicious' | 'isPinned' | 'isUnavailable' | 'contact' | 'gender' | 'birthdate' | 'educationLevel' | 'adminVerifiedExperience' | 'interestedCount' | 'ownerId' | 'createdAt' | 'updatedAt'>, string>>;


export const OfferHelpForm: React.FC<OfferHelpFormProps> = ({ onSubmitProfile, onCancel, initialData, isEditing }) => {
  const [formData, setFormData] = useState<FormDataType>(initialFormStateForCreate);
  const [formErrors, setFormErrors] = useState<FormErrorsType>({});

  useEffect(() => {
    if (isEditing && initialData) {
      const { 
        id, postedAt, userId, username, isSuspicious, isPinned, isUnavailable, contact,
        gender, birthdate, educationLevel, adminVerifiedExperience, interestedCount, 
        ownerId, createdAt, updatedAt, // Destructure to exclude
        ...editableFieldsBase
      } = initialData;
      
      const editableFields: FormDataType = {
        profileTitle: editableFieldsBase.profileTitle || '',
        details: editableFieldsBase.details || '',
        area: editableFieldsBase.area || '',
        availability: editableFieldsBase.availability || '',
        availabilityDateFrom: editableFieldsBase.availabilityDateFrom 
                                ? (editableFieldsBase.availabilityDateFrom instanceof Date 
                                    ? editableFieldsBase.availabilityDateFrom.toISOString().split('T')[0] 
                                    : String(editableFieldsBase.availabilityDateFrom)) 
                                : '',
        availabilityDateTo: editableFieldsBase.availabilityDateTo 
                                ? (editableFieldsBase.availabilityDateTo instanceof Date 
                                    ? editableFieldsBase.availabilityDateTo.toISOString().split('T')[0] 
                                    : String(editableFieldsBase.availabilityDateTo)) 
                                : '',
        availabilityTimeDetails: editableFieldsBase.availabilityTimeDetails || '',
      };
      setFormData(editableFields); 
    } else {
      setFormData(initialFormStateForCreate);
    }
  }, [isEditing, initialData]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    const key = name as keyof FormDataType; 

    setFormData(prev => ({ ...prev, [key]: value }));

    if (formErrors[key as keyof FormErrorsType]) { 
      setFormErrors(prev => ({ ...prev, [key as keyof FormErrorsType]: undefined }));
    }
  };
  
  const validateForm = () => {
    const errors: FormErrorsType = {};
    if (!formData.profileTitle.trim()) errors.profileTitle = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå';
    else if (containsBlacklistedWords(formData.profileTitle)) errors.profileTitle = '‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç';
    
    if (!formData.details.trim()) errors.details = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á';
    else if (containsBlacklistedWords(formData.details)) errors.details = '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç';

    if (!formData.area.trim()) errors.area = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å';
    
    if (formData.availabilityDateFrom && formData.availabilityDateTo && formData.availabilityDateTo < formData.availabilityDateFrom) {
        errors.availabilityDateTo = '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô';
    }
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateForm()) return;

    const dataToSubmit: FormDataType & { id?: string } = { ...formData }; 
    if (isEditing && initialData) {
      dataToSubmit.id = initialData.id;
    }
    onSubmitProfile(dataToSubmit);
     if (!isEditing) {
        setFormData(initialFormStateForCreate);
    }
  };

  const baseProfileFields = [
    { name: 'profileTitle', label: '‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå', placeholder: '‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡∏Ç‡∏ô‡∏Ç‡∏≠‡∏á, ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≠‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ñ‡∏ì‡∏¥‡∏ï', type: 'text', required: true },
    { name: 'area', label: '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏Ç‡∏ï, ‡∏ñ‡∏ô‡∏ô, ‡∏¢‡πà‡∏≤‡∏ô)', placeholder: '‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà, ‡∏¢‡πà‡∏≤‡∏ô‡∏ô‡∏¥‡∏°‡∏°‡∏≤‡∏ô‡πÄ‡∏´‡∏°‡∏¥‡∏ô‡∏ó‡πå', type: 'text', required: true },
    { name: 'availability', label: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)', placeholder: '‡πÄ‡∏ä‡πà‡∏ô "‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏¢‡πá‡∏ô", "‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 10-15 ‡∏ô‡∏µ‡πâ"', type: 'text', required: false },
  ] as const;
  
  const inputBaseStyle = "w-full p-3 bg-white dark:bg-dark-inputBg border border-[#CCCCCC] dark:border-dark-border rounded-[10px] text-neutral-dark dark:text-dark-text font-serif font-normal focus:outline-none";
  const inputFocusStyle = "focus:border-secondary dark:focus:border-dark-secondary-DEFAULT focus:ring-2 focus:ring-secondary focus:ring-opacity-70 dark:focus:ring-dark-secondary-DEFAULT dark:focus:ring-opacity-70";
  const inputErrorStyle = "border-red-500 dark:border-red-400 focus:border-red-500 dark:focus:border-red-400 focus:ring-2 focus:ring-red-500 focus:ring-opacity-70 dark:focus:ring-red-400 dark:focus:ring-opacity-70";

  const getDateString = (dateValue: string | Date | undefined): string => {
    if (!dateValue) return '';
    if (typeof dateValue === 'string') return dateValue;
    return dateValue.toISOString().split('T')[0];
  };

  return (
    <div className="bg-white dark:bg-dark-cardBg p-8 rounded-xl shadow-2xl w-full max-w-2xl mx-auto my-8 border border-neutral-DEFAULT dark:border-dark-border">
      <h2 className="text-3xl font-sans font-semibold text-secondary-hover dark:text-dark-secondary-hover mb-2 text-center">
        {isEditing ? 'üìù ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢' : 'üôã‚Äç‚ôÄÔ∏è ‡∏ù‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏ä‡πà‡∏ß‡∏¢'}
      </h2>
      <p className="text-md font-serif text-neutral-dark dark:text-dark-textMuted mb-6 text-center font-normal">
        {isEditing 
          ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏û‡∏®, ‡∏≠‡∏≤‡∏¢‡∏∏, ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)' 
          : '‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ ‡∏ß‡πà‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÑ‡∏´‡∏ô ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ñ‡∏ß‡πÑ‡∏´‡∏ô‡πÑ‡∏î‡πâ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏û‡∏®, ‡∏≠‡∏≤‡∏¢‡∏∏, ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)'}
      </p>
      <form onSubmit={handleSubmit} className="space-y-6">
        
        <div className="pt-4 border-t border-neutral-DEFAULT dark:border-dark-border/50 mt-6">
            <h3 className="text-xl font-sans font-semibold text-neutral-dark dark:text-dark-text mb-4">‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</h3>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-6 mb-4">
                <div>
                    <label htmlFor="availabilityDateFrom" className="block text-sm font-sans font-medium text-neutral-dark dark:text-dark-text mb-1">‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á: ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà</label>
                    <input type="date" id="availabilityDateFrom" name="availabilityDateFrom" value={getDateString(formData.availabilityDateFrom)} onChange={handleChange}
                        className={`${inputBaseStyle} ${formErrors.availabilityDateFrom ? inputErrorStyle : inputFocusStyle}`} />
                    {formErrors.availabilityDateFrom && <p className="text-red-500 font-sans dark:text-red-400 text-xs mt-1 font-normal">{formErrors.availabilityDateFrom}</p>}
                </div>
                <div>
                    <label htmlFor="availabilityDateTo" className="block text-sm font-sans font-medium text-neutral-dark dark:text-dark-text mb-1">‡∏ñ‡∏∂‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</label>
                    <input type="date" id="availabilityDateTo" name="availabilityDateTo" value={getDateString(formData.availabilityDateTo)} onChange={handleChange}
                        min={getDateString(formData.availabilityDateFrom) || undefined} className={`${inputBaseStyle} ${formErrors.availabilityDateTo ? inputErrorStyle : inputFocusStyle}`} />
                    {formErrors.availabilityDateTo && <p className="text-red-500 font-sans dark:text-red-400 text-xs mt-1 font-normal">{formErrors.availabilityDateTo}</p>}
                </div>
            </div>
            <div>
                <label htmlFor="availabilityTimeDetails" className="block text-sm font-sans font-medium text-neutral-dark dark:text-dark-text mb-1">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</label>
                <textarea id="availabilityTimeDetails" name="availabilityTimeDetails" value={formData.availabilityTimeDetails || ''} onChange={handleChange} rows={3}
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô ‡∏à-‡∏® ‡∏´‡∏•‡∏±‡∏á 17:00 ‡∏ô., ‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô, ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏¥‡∏î‡πÄ‡∏ó‡∏≠‡∏°"
                    className={`${inputBaseStyle} ${formErrors.availabilityTimeDetails ? inputErrorStyle : inputFocusStyle}`} />
                {formErrors.availabilityTimeDetails && <p className="text-red-500 font-sans dark:text-red-400 text-xs mt-1 font-normal">{formErrors.availabilityTimeDetails}</p>}
            </div>
        </div>

         <div className="pt-4 border-t border-neutral-DEFAULT dark:border-dark-border/50 mt-6">
             <h3 className="text-xl font-sans font-semibold text-neutral-dark dark:text-dark-text mb-4">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏â‡∏±‡∏ô</h3>
            {baseProfileFields.map(field => (
            <div key={field.name} className="mb-6 last:mb-0">
                <label htmlFor={field.name} className="block text-sm font-sans font-medium text-neutral-dark dark:text-dark-text mb-1">
                  {field.label} {field.required && <span className="text-red-500 dark:text-red-400">*</span>}
                </label>
                <input
                  type={field.type}
                  id={field.name}
                  name={field.name}
                  value={(formData[field.name as keyof typeof formData] as string) ?? ''} 
                  onChange={handleChange}
                  placeholder={field.placeholder}
                  className={`${inputBaseStyle} ${formErrors[field.name as keyof FormErrorsType] ? inputErrorStyle : inputFocusStyle}`}
                />
                {formErrors[field.name as keyof FormErrorsType] && <p className="text-red-500 font-sans dark:text-red-400 text-xs mt-1 font-normal">{formErrors[field.name as keyof FormErrorsType]}</p>}
            </div>
            ))}
            <div>
            <label htmlFor="details" className="block text-sm font-sans font-medium text-neutral-dark dark:text-dark-text mb-1">
                ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (‡∏ó‡∏±‡∏Å‡∏©‡∏∞, ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå) <span className="text-red-500 dark:text-red-400">*</span>
            </label>
            <textarea
                id="details"
                name="details"
                value={formData.details}
                onChange={handleChange}
                rows={5}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏Å‡πÑ‡∏î‡πâ, ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏î‡πá‡∏Å 2 ‡∏õ‡∏µ, ‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ñ‡∏•‡∏µ‡∏ô‡πÑ‡∏î‡πâ..."
                className={`${inputBaseStyle} ${formErrors.details ? inputErrorStyle : inputFocusStyle}`}
            />
            {formErrors.details && <p className="text-red-500 font-sans dark:text-red-400 text-xs mt-1 font-normal">{formErrors.details}</p>}
            </div>
        </div>

        <div className="flex flex-col sm:flex-row gap-4 pt-4">
          <Button type="submit" variant="secondary" size="lg" className="w-full sm:w-auto flex-grow">
            {isEditing ? 'üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' : '‡∏™‡πà‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå'}
          </Button>
          <Button type="button" onClick={onCancel} variant="outline" colorScheme="secondary" size="lg" className="w-full sm:w-auto flex-grow">
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </Button>
        </div>
      </form>
    </div>
  );
};
