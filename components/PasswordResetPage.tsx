



import React, { useState, useEffect, useRef } from 'react';
import { auth } from '../firebaseConfig.ts'; // Firebase auth instance
import { verifyPasswordResetCode, confirmPasswordReset, type AuthError } from '@firebase/auth';
import { Button } from './Button.tsx';
import { View } from '../types/types.ts';

interface PasswordResetPageProps {
  navigateTo: (view: View) => void;
}

export const PasswordResetPage: React.FC<PasswordResetPageProps> = ({ navigateTo }) => {
  const [oobCode, setOobCode] = useState<string | null>(null);
  // mode is read but not directly used in logic beyond initial check, oobCode is key
  // const [mode, setMode] = useState<string | null>(null); 

  const [isLoadingVerification, setIsLoadingVerification] = useState(true);
  const [verificationError, setVerificationError] = useState<string | null>(null);
  const [isCodeVerified, setIsCodeVerified] = useState(false);
  const [emailForReset, setEmailForReset] = useState<string | null>(null);

  const [newPassword, setNewPassword] = useState('');
  const [confirmNewPassword, setConfirmNewPassword] = useState('');
  const [passwordResetError, setPasswordResetError] = useState<string | null>(null);
  const [passwordResetSuccess, setPasswordResetSuccess] = useState(false);
  const [isResettingPassword, setIsResettingPassword] = useState(false);

  const newPasswordRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    const _modeParam = params.get('mode');
    const _codeParam = params.get('oobCode');

    // setMode(_modeParam); // Store if needed for other UI logic
    setOobCode(_codeParam);

    if (_modeParam !== 'resetPassword' || !_codeParam) {
      setVerificationError('‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏Ç‡∏≠‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      setIsLoadingVerification(false);
      setIsCodeVerified(false);
      return;
    }

    verifyPasswordResetCode(auth, _codeParam)
      .then((email) => {
        setEmailForReset(email);
        setIsCodeVerified(true);
        setVerificationError(null);
      })
      .catch((error: AuthError) => {
        let message = '‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏Ç‡∏≠‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
        // Firebase specific error codes can provide more context
        const errorCode = (error as any).code;
        if (errorCode === 'auth/invalid-action-code') {
          message = '‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏Ç‡∏≠‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
        }
        setVerificationError(message);
        setIsCodeVerified(false);
      })
      .finally(() => {
        setIsLoadingVerification(false);
      });
  }, []);

  useEffect(() => {
    if (isCodeVerified && !passwordResetSuccess && newPasswordRef.current) {
      newPasswordRef.current.focus();
    }
  }, [isCodeVerified, passwordResetSuccess]);

  const handlePasswordResetSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setPasswordResetError(null);
    setPasswordResetSuccess(false);

    if (!newPassword || !confirmNewPassword) {
      setPasswordResetError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô');
      return;
    }
    if (newPassword !== confirmNewPassword) {
      setPasswordResetError('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô');
      return;
    }
    // Basic password strength check (Firebase also does this server-side)
    if (newPassword.length < 6) {
      setPasswordResetError('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
      return;
    }

    if (!oobCode) {
      setPasswordResetError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      return;
    }

    setIsResettingPassword(true);
    confirmPasswordReset(auth, oobCode, newPassword)
      .then(() => {
        setPasswordResetSuccess(true);
        setPasswordResetError(null);
        setNewPassword('');
        setConfirmNewPassword('');
      })
      .catch((error: AuthError) => {
        let message = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
        const errorCode = (error as any).code;
        if (errorCode === 'auth/weak-password') {
          message = '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡πÄ‡∏î‡∏≤‡∏¢‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ';
        } else if (errorCode === 'auth/invalid-action-code') {
          message = '‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏Ç‡∏≠‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
        }
        setPasswordResetError(message);
        setPasswordResetSuccess(false);
      })
      .finally(() => {
        setIsResettingPassword(false);
      });
  };

  const inputBaseStyle = "w-full p-3 bg-white border border-[#CCCCCC] rounded-[10px] text-neutral-dark font-sans font-normal focus:outline-none";
  const inputFocusStyle = "focus:border-brandGreen focus:ring-1 focus:ring-brandGreen focus:ring-opacity-50";
  const inputErrorStyle = "border-red-500 focus:border-red-500 focus:ring-1 focus:ring-red-500 focus:ring-opacity-50";

  const renderContent = () => {
    if (isLoadingVerification) {
      return <p className="text-xl font-sans text-neutral-dark">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå...</p>;
    }

    if (verificationError) {
      return (
        <div className="bg-white p-8 rounded-xl shadow-2xl w-full max-w-md text-center border border-neutral-DEFAULT">
          <h2 className="text-2xl font-sans font-semibold text-accent mb-4">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h2>
          <p className="text-neutral-dark mb-6 font-normal">{verificationError}</p>
          <Button onClick={() => navigateTo(View.Login)} variant="login" size="md">
            ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
          </Button>
        </div>
      );
    }
    
    if (!isCodeVerified && !isLoadingVerification) { // Fallback for unhandled invalid states
        return (
             <div className="bg-white p-8 rounded-xl shadow-2xl w-full max-w-md text-center border border-neutral-DEFAULT">
                <h2 className="text-2xl font-sans font-semibold text-accent mb-4">‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</h2>
                <p className="text-neutral-dark mb-6 font-normal">
                    ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ú‡∏¥‡∏î, ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß, ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
                </p>
                <Button onClick={() => navigateTo(View.Login)} variant="login" size="md">
                    ‡∏Ç‡∏≠‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                </Button>
            </div>
        );
    }


    return (
      <div className="bg-white p-8 rounded-xl shadow-2xl w-full max-w-md border border-neutral-DEFAULT">
        <h2 className="text-2xl font-sans font-semibold text-brandGreen mb-2 text-center">
          üîë ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
        </h2>
        {emailForReset && (
          <p className="text-sm font-sans text-neutral-medium mb-6 text-center">
            ‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: {emailForReset}
          </p>
        )}

        {passwordResetSuccess ? (
          <div className="text-center">
            <p className="text-green-600 font-sans mb-4 text-lg">
              ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!
            </p>
            <Button onClick={() => navigateTo(View.Login)} variant="login" size="md">
              ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
            </Button>
          </div>
        ) : (
          <form onSubmit={handlePasswordResetSubmit} className="space-y-5">
            <div>
              <label
                htmlFor="newPassword"
                className="block text-sm font-sans font-medium text-neutral-dark mb-1"
              >
                ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
              </label>
              <input
                ref={newPasswordRef}
                type="password"
                id="newPassword"
                value={newPassword}
                onChange={(e) => setNewPassword(e.target.value)}
                className={`${inputBaseStyle} ${passwordResetError && (newPassword === '' || newPassword !== confirmNewPassword) ? inputErrorStyle : inputFocusStyle}`}
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                disabled={isResettingPassword}
                required
                aria-required="true"
              />
            </div>
            <div>
              <label
                htmlFor="confirmNewPassword"
                className="block text-sm font-sans font-medium text-neutral-dark mb-1"
              >
                ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
              </label>
              <input
                type="password"
                id="confirmNewPassword"
                value={confirmNewPassword}
                onChange={(e) => setConfirmNewPassword(e.target.value)}
                className={`${inputBaseStyle} ${passwordResetError && (confirmNewPassword === '' || newPassword !== confirmNewPassword) ? inputErrorStyle : inputFocusStyle}`}
                placeholder="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
                disabled={isResettingPassword}
                required
                aria-required="true"
              />
            </div>

            {passwordResetError && (
              <p className="text-red-500 font-sans text-xs text-center">{passwordResetError}</p>
            )}

            <Button type="submit" variant="login" size="lg" className="w-full" disabled={isResettingPassword}>
              {isResettingPassword ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï...' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà'}
            </Button>
          </form>
        )}
         <p className="text-center text-xs font-sans text-neutral-medium mt-6">
            ‡∏à‡∏≥‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß?{' '}
            <button
            type="button"
            onClick={() => navigateTo(View.Login)}
            className="font-sans font-medium text-brandGreen hover:underline"
            >
            ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
            </button>
        </p>
      </div>
    );
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen p-4 bg-neutral-light">
      {renderContent()}
    </div>
  );
};