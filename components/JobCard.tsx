
import React, { useState } from 'react';
import type { Job, User } from '../types';
import { View, JobCategory, JOB_CATEGORY_STYLES, JobDesiredEducationLevelOption, Province } from '../types'; // Added Province and JobDesiredEducationLevelOption
import { Button } from './Button';
import { Modal } from './Modal';
import { isDateInPast } from '../App';

interface JobCardProps {
  job: Job;
  navigateTo: (view: View) => void;
  currentUser: User | null;
  requestLoginForAction: (view: View, payload?: any) => void;
}

const formatDateDisplay = (dateInput?: string | Date | null): string | null => {
  if (dateInput === null || dateInput === undefined) {
    return null;
  }
  let dateObject: Date;
  if (dateInput instanceof Date) {
    dateObject = dateInput;
  } else if (typeof dateInput === 'string') {
    dateObject = new Date(dateInput);
  } else {
    // Handle Firestore Timestamp if applicable, or other object types
    if (typeof dateInput === 'object' && dateInput && 'toDate' in dateInput && typeof (dateInput as any).toDate === 'function') {
      dateObject = (dateInput as any).toDate();
    } else {
      console.warn("formatDateDisplay received unexpected dateInput type:", dateInput);
      return "Invalid date input";
    }
  }
  if (isNaN(dateObject.getTime())) {
    return null; 
  }
  try {
    return dateObject.toLocaleDateString('th-TH', {
      day: 'numeric',
      month: 'short',
      year: 'numeric',
    });
  } catch (e) {
    console.error("Error formatting date:", e);
    return null;
  }
};

export const JobCard: React.FC<JobCardProps> = ({ job, navigateTo, currentUser, requestLoginForAction }) => {
  const [isInterestModalOpen, setIsInterestModalOpen] = useState(false);
  const [isWarningModalOpen, setIsWarningModalOpen] = useState(false);

  const handleInterest = () => {
    setIsWarningModalOpen(true);
  };

  const closeInterestModal = () => {
    setIsInterestModalOpen(false);
  };

  const closeWarningModal = () => {
    setIsWarningModalOpen(false);
  };

  const handleProceedToContact = () => {
    setIsWarningModalOpen(false);
    setIsInterestModalOpen(true);
  };

  const formatAgeRange = () => {
    const { desiredAgeStart, desiredAgeEnd } = job;
    if (desiredAgeStart && desiredAgeEnd) {
      return desiredAgeStart === desiredAgeEnd ? `${desiredAgeStart} ‡∏õ‡∏µ` : `${desiredAgeStart} - ${desiredAgeEnd} ‡∏õ‡∏µ`;
    }
    if (desiredAgeStart) return `‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà ${desiredAgeStart} ‡∏õ‡∏µ`;
    if (desiredAgeEnd) return `‡∏ñ‡∏∂‡∏á ${desiredAgeEnd} ‡∏õ‡∏µ`;
    return null;
  };

  const ageRangeText = formatAgeRange();
  const dateNeededFromText = formatDateDisplay(job.dateNeededFrom);
  const dateNeededToText = formatDateDisplay(job.dateNeededTo);

  const postedAtDate = job.postedAt ? (job.postedAt instanceof Date ? job.postedAt : new Date(job.postedAt as string)) : null;
  const formattedPostedAt = postedAtDate && !isNaN(postedAtDate.getTime()) ? formatDateDisplay(postedAtDate) : "Processing date...";
  
  const jobIsTrulyExpired = job.isExpired || (job.expiresAt ? isDateInPast(job.expiresAt) : false);


  let dateNeededDisplay = '';
  if (dateNeededFromText && dateNeededToText) {
    dateNeededDisplay = `${dateNeededFromText} - ${dateNeededToText}`;
  } else if (dateNeededFromText) {
    dateNeededDisplay = dateNeededFromText;
  }

  let timeNeededDisplay = '';
  if (job.timeNeededStart && job.timeNeededEnd) {
    timeNeededDisplay = `${job.timeNeededStart} - ${job.timeNeededEnd} ‡∏ô.`;
  } else if (job.timeNeededStart) {
    timeNeededDisplay = `${job.timeNeededStart} ‡∏ô.`;
  }

  const descriptionPreview = job.description.substring(0, 150);
  const categoryStyle = job.category ? JOB_CATEGORY_STYLES[job.category] : JOB_CATEGORY_STYLES[JobCategory.ShortTermMisc];

  return (
    <>
      <div className="bg-white dark:bg-dark-cardBg shadow-lg rounded-xl p-6 mb-6 border border-neutral-DEFAULT dark:border-dark-border hover:shadow-xl transition-shadow duration-300 flex flex-col h-full">
        {job.isPinned && (
           <div className="mb-3 p-2 bg-yellow-100 dark:bg-dark-secondary-DEFAULT/30 border border-yellow-300 dark:border-dark-secondary-DEFAULT/50 rounded-md text-center">
            <p className="text-sm font-sans font-medium text-yellow-700 dark:text-dark-secondary-hover">
              üìå ‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
            </p>
          </div>
        )}
         {job.isHired && !jobIsTrulyExpired && (
           <div className="mb-3 p-2 bg-green-100 dark:bg-green-700/30 border border-green-300 dark:border-green-500/50 rounded-md text-center">
            <p className="text-sm font-sans font-medium text-green-700 dark:text-green-300">
              ‚úÖ ‡∏°‡∏µ‡∏Ñ‡∏ô‡∏ó‡∏≥‡πÅ‡∏•‡πâ‡∏ß
            </p>
          </div>
        )}
        {jobIsTrulyExpired && (
          <div className="mb-3 p-2 bg-red-200 dark:bg-red-700/40 border border-red-400 dark:border-red-600/60 rounded-md text-center">
            <p className="text-sm font-sans font-medium text-red-800 dark:text-red-200">
              ‚õî ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß
            </p>
          </div>
        )}
        {job.isSuspicious && (
          <div className="mb-3 p-2 bg-red-100 dark:bg-red-700/30 border border-red-300 dark:border-red-500/50 rounded-md text-center">
            <p className="text-sm font-sans font-medium text-red-700 dark:text-red-300">
              ‚ö†Ô∏è ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢ ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©
            </p>
          </div>
        )}
        <h3 className="text-2xl font-sans font-semibold text-primary dark:text-dark-primary-DEFAULT mb-1">{job.title}</h3>

        <div className="mb-1">
          <span className={`text-xs font-sans font-medium px-2 py-0.5 rounded-full inline-block ${categoryStyle.bg} ${categoryStyle.text} ${categoryStyle.border ? `border ${categoryStyle.border}`: ''}`}>
            {job.category}
          </span>
        </div>
        {job.subCategory && (
          <p className="text-xs font-serif text-neutral-medium dark:text-dark-textMuted mb-3 ml-1">
            ‚îî {job.subCategory}
          </p>
        )}

        <div className="space-y-2 text-neutral-dark dark:text-dark-textMuted mb-4 flex-grow font-normal">
          <p className="font-serif"><strong className="font-sans font-medium text-neutral-dark dark:text-dark-text">üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:</strong> {job.location} ({job.province || Province.ChiangMai})</p>
          {dateNeededDisplay && (<p className="font-serif"><strong className="font-sans font-medium text-neutral-dark dark:text-dark-text">üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:</strong> {dateNeededDisplay}</p>)}
          {timeNeededDisplay && (<p className="font-serif"><strong className="font-sans font-medium text-neutral-dark dark:text-dark-text">‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤:</strong> {timeNeededDisplay}</p>)}
          {job.dateTime && (!dateNeededDisplay || !timeNeededDisplay) && (<p className="font-serif"><strong className="font-sans font-medium text-neutral-dark dark:text-dark-text">üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà/‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°):</strong> {job.dateTime}</p>)}
          <p className="font-serif"><strong className="font-sans font-medium text-neutral-dark dark:text-dark-text">üí∞ ‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á:</strong> {job.payment}</p>

          {/* Contact information direct display removed as per request */}

          {(ageRangeText || job.preferredGender || job.desiredEducationLevel) && (
            <div className="pt-2 mt-2 border-t border-neutral-DEFAULT/50 dark:border-dark-border/50">
              <h4 className="text-sm font-sans font-medium text-neutral-dark dark:text-dark-text mt-2 mb-1">
                ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:
              </h4>
              <ul className="list-disc list-inside text-xs font-serif text-neutral-medium dark:text-dark-textMuted space-y-0.5 pl-4">
                {ageRangeText && <li>‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏: {ageRangeText}</li>}
                {job.preferredGender && <li>‡πÄ‡∏û‡∏®: {job.preferredGender}</li>}
                {job.desiredEducationLevel && job.desiredEducationLevel !== JobDesiredEducationLevelOption.Any && (
                  <li>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤: {job.desiredEducationLevel}</li>
                )}
              </ul>
            </div>
          )}
          
          <div className="mt-3">
            <strong className="font-sans font-medium text-neutral-dark dark:text-dark-text">üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô:</strong>
            <div className="mt-1 text-sm font-serif bg-neutral-light dark:bg-dark-inputBg dark:text-dark-text p-3 rounded-md whitespace-pre-wrap h-24 overflow-y-auto font-normal border border-neutral-DEFAULT/50 dark:border-dark-border/50">
              {(!currentUser || jobIsTrulyExpired) && job.description.length > 150 ? (
                <>
                  {descriptionPreview}...
                  <button
                    onClick={() => requestLoginForAction(View.FindJobs, { focusOnPostId: job.id, type: 'job' })}
                    className="text-primary dark:text-dark-primary-DEFAULT text-sm underline ml-1 font-sans"
                    aria-label="‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
                  >
                    ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                  </button>
                </>
              ) : (
                job.description || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°'
              )}
            </div>
          </div>
        </div>
        
        {formattedPostedAt && (
          <p className="text-xs font-sans sm:text-sm text-neutral-medium dark:text-dark-textMuted mt-1 pt-2 border-t border-neutral-DEFAULT/30 dark:border-dark-border/20">
            üïí ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠: {formattedPostedAt}
          </p>
        )}

        <div className="mt-auto mt-3"> {/* Added mt-3 for spacing */}
          <Button
            onClick={currentUser ? handleInterest : () => requestLoginForAction(View.FindJobs, { intent: 'contactJob', postId: job.id })}
            variant="primary"
            size="md"
            className="w-full"
            disabled={job.isHired || jobIsTrulyExpired}
            aria-label={job.isHired ? "‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ô‡∏ó‡∏≥‡πÅ‡∏•‡πâ‡∏ß" : jobIsTrulyExpired ? "‡∏á‡∏≤‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß" : (currentUser ? "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ" : "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠")}
          >
            {job.isHired ? '‚úÖ ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ô‡∏ó‡∏≥‡πÅ‡∏•‡πâ‡∏ß' : jobIsTrulyExpired ? '‚õî ‡∏á‡∏≤‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß' : (currentUser ? 'üì® ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à/‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠' : '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠')}
          </Button>
        </div>
      </div>

      {currentUser && !jobIsTrulyExpired && (
        <>
          <Modal isOpen={isWarningModalOpen} onClose={closeWarningModal} title="‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏°‡∏¥‡∏à‡∏â‡∏≤‡∏ä‡∏µ‡∏û">
            <div className="bg-amber-50 dark:bg-amber-700/20 border border-amber-300 dark:border-amber-600/40 p-4 rounded-md my-2 text-neutral-dark dark:text-dark-textMuted font-serif">
              <p className="mb-2">‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á <strong className="font-bold text-red-700 dark:text-red-400">‡∏´‡πâ‡∏≤‡∏°‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏à‡∏≠‡∏ï‡∏±‡∏ß</strong> ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏£‡∏ô‡∏±‡∏î‡πÄ‡∏à‡∏≠‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</p>
              <p>
                ‡∏´‡∏≤‡∏à‡πä‡∏≠‡∏ö‡∏à‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏ç‡∏≤‡∏ì‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ‡∏â‡∏ö‡∏±‡∏ö‡πÄ‡∏ï‡πá‡∏°‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤{" "}
                <button
                  onClick={() => {
                    closeWarningModal();
                    navigateTo(View.Safety);
                  }}
                  className="font-serif font-normal underline text-neutral-dark dark:text-dark-textMuted hover:text-primary dark:hover:text-dark-primary-DEFAULT"
                >
                  "‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"
                </button>
              </p>
            </div>
            <Button onClick={handleProceedToContact} variant="accent" className="w-full mt-4">
              ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
            </Button>
          </Modal>

          <Modal isOpen={isInterestModalOpen} onClose={closeInterestModal} title="‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ">
            <div className="text-neutral-dark dark:text-dark-textMuted font-serif p-4 rounded-md">
              <p className="mb-4">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</p>
              <div className="bg-neutral-light dark:bg-dark-inputBg p-4 rounded-md border border-neutral-DEFAULT dark:border-dark-border whitespace-pre-wrap font-sans">
                <p>{job.contact}</p>
              </div>
              <p className="text-xs text-neutral-medium dark:text-dark-textMuted mt-4 text-center">
                (‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠" ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏î‡πÜ ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®)
              </p>
              <Button onClick={closeInterestModal} variant="primary" className="w-full mt-6">
                ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ
              </Button>
            </div>
          </Modal>
        </>
      )}
    </>
  );
};
